# ~/.config/lf/lfrc

# Basic Settings
set shell sh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set hidden true
set ignorecase true
set icons true
set drawbox true
set cursorpreviewfmt "\033[7;2m"

# Previewer
set previewer ~/.config/lf/preview.sh

# Custom Commands

# Smart open command based on file type
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# Make directory
cmd mkdir %{{
    printf "Directory name: "
    read ans
    mkdir -p "$ans"
}}

# Make file
cmd mkfile %{{
    printf "File name: "
    read ans
    touch "$ans"
}}

# Delete with confirmation
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete? [y/N]: "
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# Move to trash
cmd trash %{{
    set -f
    mkdir -p ~/.trash
    mv -t ~/.trash $fx
}}

# Extract archives
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
        *) echo "Unsupported format";;
    esac
}}

# Compress to tar.gz
cmd tar ${{
    set -f
    printf "Archive name (without .tar.gz): "
    read ans
    mkdir "$ans"
    cp -r $fx "$ans"
    tar czf "$ans.tar.gz" "$ans"
    rm -rf "$ans"
}}

# Compress to zip
cmd zip ${{
    set -f
    printf "Archive name (without .zip): "
    read ans
    mkdir "$ans"
    cp -r $fx "$ans"
    zip -r "$ans.zip" "$ans"
    rm -rf "$ans"
}}

# Bulk rename
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' $fs > "$old"
    printf '%s\n' $fs > "$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS=$'\t' read -r src dst; do
        if [ "$src" != "$dst" ] && [ -e "$src" ]; then
            mv -- "$src" "$dst"
        fi
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

# Paste with rsync for progress
cmd paste-rsync &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# Show disk usage
cmd usage ${{
    du -h -d1 | less
}}

# FZF file finder
cmd fzf_jump ${{
    res="$(find . -maxdepth 5 | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        lf -remote "send $id $cmd \"$res\""
    fi
}}

# FZF search content
cmd fzf_search ${{
    res="$(rg --files-with-matches --no-messages "" | fzf --reverse --header='Search in files' --preview 'bat --color=always --style=numbers {}')"
    if [ -n "$res" ]; then
        lf -remote "send $id select \"$res\""
    fi
}}

# Show file info
cmd show-info ${{
    file "$f"
    stat "$f"
    du -h "$f"
}}

# Key Mappings

# File operations
map <enter> shell
map x $$f
map X !$f
map o &mimeopen $f
map O $mimeopen --ask $f

# Create
map a mkdir
map A mkfile

# Delete
map <delete> delete
map D trash

# Copy/paste
map p paste
map P paste-rsync

# Rename
map r push :rename<space>
map R bulk-rename

# Archive operations
map E extract
map T tar
map Z zip

# Navigation shortcuts
map gh cd ~
map gd cd ~/Documents
map gD cd ~/Downloads
map gc cd ~/.config
map g/ cd /
map gr cd /

# Search and find
map <c-f> :fzf_jump
map <c-s> :fzf_search

# Info
map i show-info
map U usage

# Toggle hidden files
map . set hidden!

# Reload config
map C reload
